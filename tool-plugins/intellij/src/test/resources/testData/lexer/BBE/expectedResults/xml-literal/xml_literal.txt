import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A complex XML defined using the literal syntax, which contains nested elements of different types.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sherlock Holmes')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sir Arthur Conan Doyle')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_COMMENT_START ('<!--')
XML_COMMENT_TEXT ('Price: $10-->\n                  </book>`;\n    io:println(x1);\n\n    // Defines namespaces. These are visible to all the XML literals defined from this point onwards.  \n    xmlns "http://ballerina.com/";\n    xmlns "http://ballerina.com/aa" as ns0;\n\n    // Creates an XML element. Previously-defined namespaces will be added to the element. \n    // The defined prefixes can be applied to elements and attributes inside the element. \n    xml x2 = xml `<book ns0:status="available">\n                    <ns0:name>Sherlock Holmes</ns0:name>\n                    <author>Sir Arthur Conan Doyle</author>\n                    <!--Price: $10-->\n                  </book>`;\n    io:println(x2);\n\n    // XML can be interpolated with expressions using the `${}` notation.\n    // The expression can be a previously-defined variable, arithmetic expressions, or even a function call. \n    // These expressions are evaluated at runtime.\n    string title = "(Sir)";\n\n    xml x3 = xml `<ns0:newBook>\n                    <name>Sherlock Holmes</name>\n                    <author>${title} Arthur Conan Doyle</author>\n                    <!--Price: $${ 40 / 5 + 4 }')
XML_COMMENT_END ('-->')
XML_TEXT_SEQUENCE ('\n                  ')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('ns0')
QNAME_SEPARATOR (':')
XML_QNAME ('newBook')
XML_TAG_CLOSE ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x3')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
