import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('artemis')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Consumer listens to the queue (i.e., "my_queue") with the address')
WHITE_SPACE ('\n')
LINE_COMMENT ('// (i.e., "my_address").')
WHITE_SPACE ('\n')
@ ('@')
identifier ('artemis')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('queueConfig')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('queueName')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"my_queue"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('addressName')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"my_address"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('routingType')
: (':')
WHITE_SPACE (' ')
identifier ('artemis')
: (':')
identifier ('MULTICAST')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Attaches the service to the listener.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('artemisConsumer')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('artemis')
: (':')
identifier ('Listener')
( ('(')
{ ('{')
identifier ('host')
: (':')
QUOTED_STRING_LITERAL ('"localhost"')
, (',')
WHITE_SPACE (' ')
identifier ('port')
: (':')
DECIMAL_INTEGER_LITERAL ('61616')
} ('}')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is triggered when a message is received.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onMessage')
( ('(')
identifier ('artemis')
: (':')
identifier ('Message')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Retrieves the message payload.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
. ('.')
identifier ('getPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"Payload is "')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Checks for the type of the payload and prints the type.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
map ('map')
< ('<')
string ('string')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"map<string>"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
map ('map')
< ('<')
int ('int')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int map"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"string"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"byte[]"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
map ('map')
< ('<')
byte ('byte')
[ ('[')
] (']')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"map<byte[]>"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
map ('map')
< ('<')
boolean ('boolean')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"map<boolean>"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
map ('map')
< ('<')
float ('float')
> ('>')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"map<float>"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('message')
. ('.')
identifier ('getType')
( ('(')
) (')')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('artemis')
: (':')
identifier ('STREAM')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"stream"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('WritableByteChannel')
WHITE_SPACE (' ')
identifier ('destinationChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openWritableFile')
( ('(')
QUOTED_STRING_LITERAL ('"./my_file.txt"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
. ('.')
identifier ('saveToWritableByteChannel')
( ('(')
identifier ('untaint')
WHITE_SPACE (' ')
identifier ('destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while saving stream message"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Prints the payload.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
