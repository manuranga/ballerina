import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates an integer array with several integer elements.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('intArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('length')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This prints the length of the created integer array. The length is ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// calculated using the `length()` function.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('intArray')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Integer array size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates a JSON array with several JSON elements.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('31')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Neal"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"age"')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('22')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This prints the length of the created JSON array.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('jsonArray')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"JSON array size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates an `int`-constrained `map`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('strMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('strMap')
[ ('[')
QUOTED_STRING_LITERAL ('"A"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('strMap')
[ ('[')
QUOTED_STRING_LITERAL ('"B"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE ('\n    ')
identifier ('strMap')
[ ('[')
QUOTED_STRING_LITERAL ('"C"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This prints the length of the created `map`.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('strMap')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Map size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates a `string`.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('myStr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"My name is Peter Parker"')
; (';')
WHITE_SPACE ('\n    \n    ')
LINE_COMMENT ('// This prints the length of the `string`.')
WHITE_SPACE ('\n    ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('myStr')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"String size: "')
, (',')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates an XML element.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sherlock Holmes')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sir Arthur Conan Doyle')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_COMMENT_START ('<!--')
XML_COMMENT_TEXT ('Price: $10-->\n                  </book>`;\n\n    // This prints the number of content items in the XML element.\n    length = x1.*.elements().length();\n    io:println("XML child elements size: ", length);\n\n    // This creates a tuple with two members.\n    (int, string) tupleVar = (10, "John");\n\n    // This prints the size of the tuple i.e., the number of members in the tuple.\n    length = tupleVar.length();\n    io:println("Tuple size: ", length);\n\n    // This creates a `record` of the `Student` type.\n    Student stu = { id: 1, fname: "John", lname: "Doe", age: 17};\n\n    // This prints the number of fields of the `Student` record type.\n    length = stu.length();\n    io:println("Field size in `Student` record: ", length);\n\n    // This creates an in-memory `table` constrained by the `Student` type.\n    table<Student> tbStudent = table {\n        { key id, fname, lname, age },\n        [ { 1, "Mary", "Popins" , 17 },\n          { 2, "John", "Doe", 16 },\n          { 3, "Jim", "Carter", 17 }\n        ]\n    };\n\n    // This prints the number of rows in the in-memory table.\n    length = tbStudent.length();\n    io:println("Row count in table : ", length);\n}\n\ntype Student record {|\n    int id;\n    string fname;\n    string lname;\n    int age;\n    string...;\n|};')
