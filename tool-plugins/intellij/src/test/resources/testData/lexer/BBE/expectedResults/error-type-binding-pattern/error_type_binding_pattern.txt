import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('SampleError')
WHITE_SPACE (' ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
map ('map')
< ('<')
anydata ('anydata')
| ('|')
error ('error')
> ('>')
> ('>')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This error-type binding pattern will destructure an `error` of the type `SampleError`, and create two variables as follows:')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value of the reason string in the`SampleError` will be set to a new `string` variable `reason`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value of the detail mapping will be set to a new `map<anydata|error>` variable `detail`.')
WHITE_SPACE ('\n    ')
identifier ('SampleError')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('reason')
, (',')
WHITE_SPACE (' ')
identifier ('detail')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Reason String: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Mapping: %s"')
, (',')
WHITE_SPACE (' ')
identifier ('detail')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The detail-mapping value can further be destructured using a record-binding pattern.')
WHITE_SPACE ('\n    ')
identifier ('SampleError')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('reasonTwo')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('detail')
: (':')
WHITE_SPACE (' ')
identifier ('detailTwo')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
WHITE_SPACE (' ')
} ('}')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Reason String: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('reasonTwo')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Mapping Field One: %s"')
, (',')
WHITE_SPACE (' ')
identifier ('detailTwo')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Mapping Field Two: %s"')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Error-type binding patterns can be used with `var` to infer the type from the right hand side.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Since the types of the new variables are based on the type of the type-binding pattern, using `var` will')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// infer the types from the right hand side.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('vReason')
, (',')
WHITE_SPACE (' ')
identifier ('vDetail')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Type of `vReason` is inferred as `string`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Reason String: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('vReason')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Type of `vDetail` is inferred as `map<anydata|error>`.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Mapping: %s"')
, (',')
WHITE_SPACE (' ')
identifier ('vDetail')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The underscore '_' sign can be used to ignore either the reason string or the detail mapping.')
WHITE_SPACE ('\n    ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
identifier ('Foo')
> ('>')
WHITE_SPACE (' ')
error ('error')
( ('(')
identifier ('_')
, (',')
WHITE_SPACE (' ')
identifier ('fooRec')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getRecordConstrainedError')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"Detail Mapping: %s"')
, (',')
WHITE_SPACE (' ')
< ('<')
identifier ('Foo')
> ('>')
WHITE_SPACE (' ')
identifier ('fooRec')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getSampleError')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('SampleError')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('SampleError')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Sample Error"')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('detail')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Detail Msg"')
, (',')
WHITE_SPACE (' ')
identifier ('fatal')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Foo')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
LEFT_CLOSED_RECORD_DELIMITER ('{|')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('detailMsg')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isFatal')
; (';')
WHITE_SPACE ('\n')
RIGHT_CLOSED_RECORD_DELIMITER ('|}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getRecordConstrainedError')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
identifier ('Foo')
> ('>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
identifier ('Foo')
> ('>')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Some Error"')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('detailMsg')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Failed Message"')
, (',')
WHITE_SPACE (' ')
identifier ('isFatal')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n')
} ('}')
