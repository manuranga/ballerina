import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jms')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This initializes a JMS connection with the provider. This example uses')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the ActiveMQ Artemis broker for demonstration. However, it can be tried')
WHITE_SPACE ('\n')
LINE_COMMENT ('// with other brokers that support JMS.')
WHITE_SPACE ('\n\n')
identifier ('jms')
: (':')
identifier ('Connection')
WHITE_SPACE (' ')
identifier ('jmsConnection')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('initialContextFactory')
: (':')
WHITE_SPACE (' \n        ')
QUOTED_STRING_LITERAL ('"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('providerUrl')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"tcp://localhost:61616"')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Initializes a JMS session on top of the created connection.')
WHITE_SPACE ('\n')
identifier ('jms')
: (':')
identifier ('Session')
WHITE_SPACE (' ')
identifier ('jmsSession')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('jmsConnection')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('acknowledgementMode')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AUTO_ACKNOWLEDGE"')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Initializes a queue receiver on top of the created sessions.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('QueueListener')
WHITE_SPACE (' ')
identifier ('queueReceiver')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('jmsSession')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"MyQueue"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('jms')
: (':')
identifier ('QueueReceiverCaller')
WHITE_SPACE (' ')
identifier ('caller')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('queueReceiver')
. ('.')
identifier ('getCallerActions')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Keeps the JMS session alive until the message is received by the JMS provider.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the message is not received within five seconds, the session times out.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('receive')
( ('(')
DECIMAL_INTEGER_LITERAL ('30000')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('Message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is executed if the message is received.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('messageText')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('getPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('messageText')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Message : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('messageText')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('messageText')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while reading message."')
, (',')
WHITE_SPACE ('\n                ')
identifier ('messageText')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is executed if the message is not received within five seconds.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Message not received"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is executed if an error occurs.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error receiving message : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                ')
< ('<')
string ('string')
> ('>')
identifier ('result')
. ('.')
identifier ('detail')
( ('(')
) (')')
[ ('[')
QUOTED_STRING_LITERAL ('"message"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
