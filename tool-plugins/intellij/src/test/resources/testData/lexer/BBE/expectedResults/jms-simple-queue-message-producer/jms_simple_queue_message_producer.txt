import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jms')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creates a queue sender. This example makes use of the ActiveMQ Artemis')
WHITE_SPACE ('\n')
LINE_COMMENT ('// broker for demonstration while it can be tried with other brokers that')
WHITE_SPACE ('\n')
LINE_COMMENT ('// support JMS.')
WHITE_SPACE ('\n')
identifier ('jms')
: (':')
identifier ('QueueSender')
WHITE_SPACE (' ')
identifier ('queueSender')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('initialContextFactory')
: (':')
WHITE_SPACE (' \n        ')
QUOTED_STRING_LITERAL ('"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('providerUrl')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"tcp://localhost:61616"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('acknowledgementMode')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AUTO_ACKNOWLEDGE"')
WHITE_SPACE ('\n    ')
} ('}')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"MyQueue"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a text message.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('Message')
( ('(')
identifier ('queueSender')
. ('.')
identifier ('session')
, (',')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('TEXT_MESSAGE')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('msg')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('Message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('msg')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Hello from Ballerina"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Unable to set payload"')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Send the Ballerina message to the JMS provider.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('returnVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('queueSender')
-> ('->')
identifier ('send')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returnVal')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while sending message"')
, (',')
WHITE_SPACE ('\n                ')
identifier ('returnVal')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while creating message"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('msg')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
