import ('import')
WHITE_SPACE (' ')
identifier ('ballerinax')
/ ('/')
identifier ('java')
. ('.')
identifier ('jms')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This initializes a JMS connection with the provider. This example uses')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the ActiveMQ Artemis broker. However, it can be tried with')
WHITE_SPACE ('\n')
LINE_COMMENT ('// other brokers that support JMS.')
WHITE_SPACE ('\n')
identifier ('jms')
: (':')
identifier ('Connection')
WHITE_SPACE (' ')
identifier ('conn')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('initialContextFactory')
: (':')
WHITE_SPACE ('\n         ')
QUOTED_STRING_LITERAL ('"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('providerUrl')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"tcp://localhost:61616"')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Initializes a JMS session on top of the created connection.')
WHITE_SPACE ('\n')
identifier ('jms')
: (':')
identifier ('Session')
WHITE_SPACE (' ')
identifier ('jmsSession')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('conn')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Sets to the client-acknowledgment mode.')
WHITE_SPACE ('\n        ')
identifier ('acknowledgementMode')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"CLIENT_ACKNOWLEDGE"')
WHITE_SPACE ('\n    ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Initializes a queue receiver using the created session.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('QueueListener')
WHITE_SPACE (' ')
identifier ('consumerEndpoint')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('jmsSession')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"MyQueue"')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Binds the created consumer to the listener service.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('jmsListener')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('consumerEndpoint')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is invoked when a message is received.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onMessage')
( ('(')
identifier ('jms')
: (':')
identifier ('QueueReceiverCaller')
WHITE_SPACE (' ')
identifier ('consumer')
, (',')
WHITE_SPACE ('\n    ')
identifier ('jms')
: (':')
identifier ('Message')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Retrieve the text message.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
. ('.')
identifier ('getPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Message : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Acknowledge the received message using the acknowledge function')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// of the queue receiver endpoint.')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('ack')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
-> ('->')
identifier ('acknowledge')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('ack')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while acknowledging message"')
, (',')
WHITE_SPACE ('\n                    ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ack')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while reading message"')
, (',')
WHITE_SPACE ('\n                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
