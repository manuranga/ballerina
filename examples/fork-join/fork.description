// In a function execution, a fork-join statement splits the current execution to multiple workers, which do their work in
// parallel, and joins the executions together to process their results.
// The `fork` block allows you to start any number of parallel workers at once.
// Workers are visible outside the fork block as futures. You may wait for the worker returns using `wait` expression.
// You may also send `anydata` variables form one fork worker to another worker in the same fork.
