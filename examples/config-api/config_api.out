# Sensitive data such as passwords can be encrypted and accessed securely in code. To encrypt a value, the
# `ballerina encrypt` command is used. It prompts the user to enter the value and a secret. In this example,
# `ballerina` is the value and `12345` is the secret.
$ ballerina encrypt
Enter value:

Enter secret:

Re-enter secret to verify:

Add the following to the runtime config:
@encrypted:{jFMAXsuMSiOCaxuDLuQjVXzMzZxQrten0652/j93Amw=}

Or add to the runtime command line:
-e<param>=@encrypted:{jFMAXsuMSiOCaxuDLuQjVXzMzZxQrten0652/j93Amw=}

# The secret needs to be provided if a configuration contains an encrypted value. The secret can be provided
# via a `secret.txt` file or via the CLI. In this example, the CLI is used.
$ ballerina run config_api.bal
ballerina: enter secret for config value decryption:


# To explicitly specify a configuration file, use either the `--config` or the `-c` flag.
# If this flag is not set, Ballerina looks for a `ballerina.conf` file in the directory in which the source files
# are located. The path to the configuration file can be either an absolute or a relative path.
# To run this example, place the following configurations in a file and provide its path.
# ```
# [hello]
# http.port=8085
# keystore.password="@encrypted:{jFMAXsuMSiOCaxuDLuQjVXzMzZxQrten0652/j93Amw=}"
# ```
$ ballerina run --config path/to/conf/file/custom-config-file-name.conf config_api.bal
ballerina: enter secret for config value decryption:

ballerina: started HTTPS/WSS listener 0.0.0.0:8085

# The same configurations given via a configuration file can also be given via CLI parameters. <br>
# e.g., hello.http.port
$ ballerina run -e hello.http.port=8085 -e hello.keystore.password=@encrypted:{jFMAXsuMSiOCaxuDLuQjVXzMzZxQrten0652/j93Amw=} config_api.bal
ballerina: enter secret for config value decryption:

ballerina: started HTTPS/WSS listener 0.0.0.0:8085
