{{#if stubList}}import ballerina/grpc;
import ballerina/io;
{{/if}}{{#stubList}}
public type {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Client client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    function __init(string url, grpc:ClientEndpointConfig? config = ()) {
        // initialize client endpoint.
        grpc:Client c = new(url, config);
        grpc:Error? result = c.initStub(self, "{{stubType}}", ROOT_DESCRIPTOR, getDescriptorMap());
        if (result is grpc:Error) {
            error err = result;
            panic err;
        } else {
            self.grpcClient = c;
        }
    }

{{#blockingFunctions}}
    remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}grpc:Headers? headers = ()) returns ({{#if outputType}}[{{outputType}}, grpc:Headers]{{else}}grpc:Headers{{/if}}|grpc:Error) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        var payload = check self.grpcClient->blockingExecute("{{methodId}}", req, headers);
        grpc:Headers resHeaders = new;
        {{#if outputType}}anydata result = ();
        [result, resHeaders] = payload;
        {{#not_equal outputType "string"}}var value = typedesc<{{outputType}}>.constructFrom(result);
        if (value is {{outputType}}) {
            return [value, resHeaders];
        } else {
            return grpc:prepareError(grpc:INTERNAL_ERROR, "Error while constructing the message", value);
        }{{/not_equal}}{{#equals outputType "string"}}return [result.toString(), resHeaders];{{/equals}}{{else}}[_, resHeaders] = payload;
        return resHeaders;{{/if}}
    }
{{/blockingFunctions}}{{#nonBlockingFunctions}}
    remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        return self.grpcClient->nonBlockingExecute("{{methodId}}", req, msgListener, headers);
    }
{{/nonBlockingFunctions}}{{#streamingFunctions}}
    remote function {{methodName}}(service msgListener, grpc:Headers? headers = ()) returns (grpc:StreamingClient|grpc:Error) {
        return self.grpcClient->streamingExecute("{{methodId}}", msgListener, headers);
    }{{/streamingFunctions}}
};
{{/stubList}}{{#messageList}}
type {{messageName}} record {|
    {{#fieldList}}{{fieldType}}{{fieldLabel}} {{fieldName}}{{#if defaultValue}} = {{defaultValue}}{{/if}};
    {{/fieldList}}{{#each oneofFieldMap as |value key|}}{{camelcase @key}} {{@key}};
    {{/each}}
|};
{{#each oneofFieldMap}}
public type {{camelcase @key}} {{#each this}}{{this.messageName}}{{#unless @last}}|{{/unless}}{{/each}};
{{#each this}}
type {{this.messageName}} record {|
    {{#this.fieldList}}{{fieldType}}{{fieldLabel}} {{fieldName}}{{#if defaultValue}} = {{defaultValue}}{{/if}};
    {{/this.fieldList}}
|};
{{/each}}{{/each}}
{{#enumList}}public type {{messageName}} {{#fieldList}}"{{name}}"{{#unless @last}}|{{/unless}}{{/fieldList}};
{{#fieldList}}const public {{../messageName}} {{uppercase ../messageName}}_{{name}} = "{{name}}";
{{/fieldList}}
{{/enumList}}{{/messageList}}
{{#enumList}}public type {{messageName}} {{#fieldList}}"{{name}}"{{#unless @last}}|{{/unless}}{{/fieldList}};
{{#fieldList}}public final {{../messageName}} {{uppercase ../messageName}}_{{name}} = "{{name}}";
{{/fieldList}}{{/enumList}}{{#if rootDescriptor}}
const string ROOT_DESCRIPTOR = "{{rootDescriptor}}";
function getDescriptorMap() returns map<string> {
    return {
        {{#each descriptors}}"{{descriptorKey}}":"{{descriptorData}}"{{#unless @last}},{{/unless}}
        {{/each}}
    };
}{{/if}}
