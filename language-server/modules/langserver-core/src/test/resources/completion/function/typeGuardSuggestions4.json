{
  "position": {
    "line": 13,
    "character": 18
  },
  "source": "function/source/typeGuardSuggestions4.bal",
  "items": [
    {
      "label": "anydataType",
      "kind": "Keyword",
      "detail": "Anydata",
      "insertText": "anydataType",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "fromJsonString()((json|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nParse a string in JSON format and return the the value that it represents.\nAll numbers in the JSON will be represented as float values.\nReturns an error if the string cannot be parsed.  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \n(json|error)"
        }
      },
      "insertText": "fromJsonString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "keys()(string[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nReturns a list of all the keys of map `m`.  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nstring[]"
        }
      },
      "insertText": "keys(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "remove(string k)((any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nRemoves the member of `m` with key `k` and returns it.\nPanics if there is no such member  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \n(any|error)"
        }
      },
      "insertText": "remove(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "Type1",
      "kind": "Enum",
      "detail": "Union",
      "insertText": "Type1",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "iterator()()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nReturns an iterator over the members of `m`  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nobject { public function next () returns (record {| $|0 value; |}?); }"
        }
      },
      "insertText": "iterator(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "removeAll()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nRemoves all members of `m`.\nPanics if any member cannot be removed.  \n  \n---    \n**Parameters**  \n"
        }
      },
      "insertText": "removeAll(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "isReadOnly()(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nTests whether `v` is read-only, i.e. immutable\nReturns true if read-only, false otherwise.  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nboolean"
        }
      },
      "insertText": "isReadOnly(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "get(string k)((any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nReturns the member of map m with key k.\nPanics if m does not have a member with key k.  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \n(any|error)"
        }
      },
      "insertText": "get(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "map(function ((any|error)) returns ((any|error)) func)(map<(any|error)>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nmap<(any|error)>"
        }
      },
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toJsonString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturn the string that represents `v` in JSON format.  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nstring"
        }
      },
      "insertText": "toJsonString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "reduce(function ((any|error),(any|error)) returns ((any|error)) func, (any|error) initial)((any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \n(any|error)"
        }
      },
      "insertText": "reduce(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "hasKey(string k)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nTells whether m has a member with key `k`.  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nboolean"
        }
      },
      "insertText": "hasKey(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "PureType",
      "kind": "Enum",
      "detail": "Union",
      "insertText": "PureType",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "forEach(function ((any|error)) returns () func)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nApplies `func` to each member of `m`.  \n  \n---    \n**Parameters**  \n"
        }
      },
      "insertText": "forEach(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneReadOnly()(anydata)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a clone of `value` that is read-only, i.e. immutable.\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.  \n  \n---    \n**Parameters**  \n"
        }
      },
      "insertText": "cloneReadOnly(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "length()(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \nReturns number of members in `m`.  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nint"
        }
      },
      "insertText": "length(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "MapIterator",
      "kind": "Class",
      "detail": "Object",
      "insertText": "MapIterator",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "filter(function ((any|error)) returns (boolean) func)(map<(any|error)>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nmap<(any|error)>"
        }
      },
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "Type",
      "kind": "Enum",
      "detail": "Union",
      "insertText": "Type",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "entries()(map<[string,(any|error)]>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.map_  \n  \n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nmap<[string,(any|error)]>"
        }
      },
      "insertText": "entries(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "field1",
      "kind": "Variable",
      "detail": "int",
      "insertText": "field1",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "mergeJson(json j2)((json|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturn the result of merging json value `j1` with `j2`.\nIf the merge fails, then return an error.\nThe merge of j1 with j2 is defined as follows:\n- if j1 is (), then the result is j2\n- if j2 is nil, then the result is j1\n- if j1 is a mapping and j2 is a mapping, then for each entry [k, j] in j2,\n  set j1[k] to the merge of j1[k] with j\n    - if j1[k] is undefined, then set j1[k] to j\n    - if any merge fails, then the merge of j1 with j2 fails\n    - otherwise, the result is j1.\n- otherwise, the merge fails  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \n(json|error)"
        }
      },
      "insertText": "mergeJson(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "clone()(anydata)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a clone of `value`.\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.  \n  \n---    \n**Parameters**  \n"
        }
      },
      "insertText": "clone(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a simple, human-readable representation of `value` as a string.\n- if `value` is a string, then returns `value`\n- if `value` is `()`, then returns an empty string\n- if `value` is boolean, then the string `true` or `false`\n- if `value` is an int, then return `value` represented as a decimal string\n- if `value` is a float or decimal, then return `value` represented as a decimal string,\n  with a decimal point only if necessary, but without any suffix indicating the type of `value`\n  return `NaN`, `Infinity` for positive infinity, and `-Infinity` for negative infinity\n- if `value` is a list, then returns the results toString on each member of the list\n  separated by a space character\n- if `value` is a map, then returns key=value for each member separated by a space character\n- if `value` is xml, then returns `value` in XML format (as if it occurred within an XML element)\n- if `value` is table, TBD\n- if `value` is an error, then a string consisting of the following in order\n    1. the string `error`\n    2. a space character\n    3. the reason string\n    4. if the detail record is non-empty\n        1. a space character\n        2. the result of calling toString on the detail record\n- if `value` is an object, then\n    - if `value` provides a `toString` method with a string return type and no required methods,\n      then the result of calling that method on `value`\n    - otherwise, `object` followed by some implementation-dependent string\n- if `value` is any other behavioral type, then the identifier for the behavioral type\n  (`function`, `future`, `service`, `typedesc` or `handle`)\n  followed by some implementation-dependent string\n\nNote that `toString` may produce the same string for two Ballerina values\nthat are not equal (in the sense of the `==` operator).  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nstring"
        }
      },
      "insertText": "toString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "field2",
      "kind": "Variable",
      "detail": "string",
      "insertText": "field2",
      "insertTextFormat": "Snippet"
    }
  ]
}
